{
	"info": {
		"_postman_id": "a578f83a-3e7c-47ad-8a21-5df6c82a08e5",
		"name": "API REST, TecnologÃ­a Web",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33785430"
	},
	"item": [
		{
			"name": "Tipo de proyecto",
			"item": [
				{
					"name": "Get",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4001/api/v1/tipoProyecto",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4001",
							"path": [
								"api",
								"v1",
								"tipoProyecto"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"articulo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4001/api/v1/tipoProyecto",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4001",
							"path": [
								"api",
								"v1",
								"tipoProyecto"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"trabajo final\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4001/api/v1/tipoProyecto/6632c0367e56f795ba095af1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4001",
							"path": [
								"api",
								"v1",
								"tipoProyecto",
								"6632c0367e56f795ba095af1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:4001/api/v1/tipoProyecto/6632c0307e56f795ba095aef",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4001",
							"path": [
								"api",
								"v1",
								"tipoProyecto",
								"6632c0307e56f795ba095aef"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cliente",
			"item": [
				{
					"name": "Post",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"prueba\",\r\n    \"email\": \"test@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4001/api/v1/cliente",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4001",
							"path": [
								"api",
								"v1",
								"cliente"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4001/api/v1/cliente",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4001",
							"path": [
								"api",
								"v1",
								"cliente"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Juan Castro\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4001/api/v1/cliente/6632e054e48be76ebd8b17cc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4001",
							"path": [
								"api",
								"v1",
								"cliente",
								"6632e054e48be76ebd8b17cc"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:4001/api/v1/cliente/6632da0fe48be76ebd8b17c7",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4001",
							"path": [
								"api",
								"v1",
								"cliente",
								"6632da0fe48be76ebd8b17c7"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Universidad",
			"item": [
				{
					"name": "Post",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"borrar\",\r\n    \"direccion\": \"Barranquilla, Colombia\",\r\n    \"telefono\": \"3016758499\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4001/api/v1/universidad",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4001",
							"path": [
								"api",
								"v1",
								"universidad"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4001/api/v1/universidad",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4001",
							"path": [
								"api",
								"v1",
								"universidad"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Universidad de Barranquilla\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4001/api/v1/universidad/663410df381efa1e3e600dd9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4001",
							"path": [
								"api",
								"v1",
								"universidad",
								"663410df381efa1e3e600dd9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:4001/api/v1/universidad/663410e9381efa1e3e600ddb",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4001",
							"path": [
								"api",
								"v1",
								"universidad",
								"663410e9381efa1e3e600ddb"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Etapas",
			"item": [
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"nombre\": \"entrega parcial 1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4001/api/v1/etapa/663412f1d4ff940524bba75b",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4001",
							"path": [
								"api",
								"v1",
								"etapa",
								"663412f1d4ff940524bba75b"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4001/api/v1/etapa",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4001",
							"path": [
								"api",
								"v1",
								"etapa"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4001/api/v1/etapa/66341333d4ff940524bba760",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4001",
							"path": [
								"api",
								"v1",
								"etapa",
								"66341333d4ff940524bba760"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"nombre\": \"borrar\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4001/api/v1/etapa",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4001",
							"path": [
								"api",
								"v1",
								"etapa"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Proyecto",
			"item": [
				{
					"name": "Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"numero\": \"3\",\n    \"titulo\": \"actididad S30\",\n    \"fechaInicio\": \"05/03/2024\",\n    \"fechaEntrega\": \"07/03/2024\",\n    \"valor\": \"30\",\n    \"cliente\": \"6632e054e48be76ebd8b17cc\",\n    \"tipo\": \"664b8299fa60e52d0ee858a8\",\n    \"universidad\": \"66341089381efa1e3e600dd5\",\n    \"etapa\": \"663412f1d4ff940524bba75b\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4002/api/v1/proyecto/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4002",
							"path": [
								"api",
								"v1",
								"proyecto",
								""
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"numero\": \"3\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4002/api/v1/proyecto/66341f2f9b0a0ba8b13631dd",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4002",
							"path": [
								"api",
								"v1",
								"proyecto",
								"66341f2f9b0a0ba8b13631dd"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4002/api/v1/proyecto/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4002",
							"path": [
								"api",
								"v1",
								"proyecto",
								""
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4002/api/v1/proyecto/663420d59b0a0ba8b13631df",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4002",
							"path": [
								"api",
								"v1",
								"proyecto",
								"663420d59b0a0ba8b13631df"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}